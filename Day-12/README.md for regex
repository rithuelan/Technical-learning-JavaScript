üîç Understanding Regular Expressions (RegEx) in JavaScript
Overview

Regular Expressions, or RegEx, are patterns used to match, search, and manipulate text in JavaScript.
They are extremely useful for:

Validating user input (emails, phone numbers, passwords)

Searching for patterns in strings

Replacing text efficiently

Extracting data from strings

Think of RegEx as a search blueprint for text.

1Ô∏è‚É£ RegEx Syntax

There are two ways to create a RegEx:

Literal Syntax

const pattern = /hello/;


Constructor Syntax

const pattern = new RegExp("hello");


/pattern/ ‚Üí Defines the pattern directly

RegExp() ‚Üí Useful when pattern is dynamic

2Ô∏è‚É£ Flags

Flags modify how a RegEx behaves:

Flag	Description
g	Global search (find all matches)
i	Case-insensitive search
m	Multi-line search
s	Dot matches newline
u	Unicode support
y	Sticky search (matches at lastIndex only)

Example:

const pattern = /hello/gi; // matches all "hello" regardless of case

3Ô∏è‚É£ Key Methods
a) test()

Checks if a pattern exists in a string

Returns true or false

const pattern = /hello/;
console.log(pattern.test("hello world")); // true

b) match()

Finds matches in a string

Returns an array of all matches or null

const str = "hello hello world";
console.log(str.match(/hello/g)); // ["hello", "hello"]

c) replace()

Replaces matched text with something new

const str = "I love cats";
console.log(str.replace(/cats/, "dogs")); // "I love dogs"

d) exec()

Returns an array with match details, useful for capturing groups

const pattern = /(\d{4})-(\d{2})-(\d{2})/;
const result = pattern.exec("2025-10-10");
console.log(result); 
// ["2025-10-10", "2025", "10", "10"]

4Ô∏è‚É£ Practical Examples
// Validate email
const emailPattern = /^[\w.-]+@[\w.-]+\.\w+$/;
console.log(emailPattern.test("user@example.com")); // true

// Extract digits
const digits = "Order 12345".match(/\d+/);
console.log(digits); // ["12345"]

// Replace spaces with hyphens
const slug = "Hello World".replace(/\s+/g, "-");
console.log(slug); // "Hello-World"

5Ô∏è‚É£ How It Works (Conceptual Understanding)

A RegEx pattern is like a blueprint or filter.

JS checks the string against the pattern.

If it matches ‚Üí returns match info (true, array, etc.)

If it doesn‚Äôt match ‚Üí returns false or null.

Think of it like searching with wildcards:

"h.llo" ‚Üí matches "hello", "hallo", "hxllo"

6Ô∏è‚É£ Mini Project Idea

Goal: Create a live Input Validator tool:

Check if user input is a valid email, phone, or date

Highlight matches in a string

Replace certain patterns dynamically

Example:

function validateEmail(email) {
  const pattern = /^[\w.-]+@[\w.-]+\.\w+$/;
  return pattern.test(email);
}

console.log(validateEmail("user@example.com")); // true


Summary:
Regular Expressions are essential for text manipulation and validation. Once you understand the syntax, flags, and methods, you can search, match, replace, and extract data efficiently in JavaScript.
